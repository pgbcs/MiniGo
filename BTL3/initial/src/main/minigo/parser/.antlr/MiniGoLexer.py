# Generated from d:/Nam3/PPL/BTL/MiniGo/BTL3/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,65,508,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        5,0,146,8,0,10,0,12,0,149,9,0,1,0,1,0,1,1,1,1,4,1,155,8,1,11,1,12,
        1,156,1,1,1,1,4,1,161,8,1,11,1,12,1,162,1,1,5,1,166,8,1,10,1,12,
        1,169,9,1,1,1,4,1,172,8,1,11,1,12,1,173,1,1,4,1,177,8,1,11,1,12,
        1,178,3,1,181,8,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,189,8,2,10,2,12,2,
        192,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,
        39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,
        43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
        48,5,48,382,8,48,10,48,12,48,385,9,48,3,48,387,8,48,1,49,1,49,1,
        49,4,49,392,8,49,11,49,12,49,393,1,50,1,50,1,50,4,50,399,8,50,11,
        50,12,50,400,1,51,1,51,1,51,4,51,406,8,51,11,51,12,51,407,1,52,4,
        52,411,8,52,11,52,12,52,412,1,52,1,52,5,52,417,8,52,10,52,12,52,
        420,9,52,1,52,3,52,423,8,52,1,53,1,53,1,53,5,53,428,8,53,10,53,12,
        53,431,9,53,1,53,1,53,1,54,1,54,1,54,5,54,438,8,54,10,54,12,54,441,
        9,54,1,55,1,55,1,55,5,55,446,8,55,10,55,12,55,449,9,55,1,55,1,55,
        1,55,1,56,1,56,3,56,456,8,56,1,56,1,56,1,56,5,56,461,8,56,10,56,
        12,56,464,9,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
        1,62,1,62,1,63,1,63,3,63,480,8,63,1,63,4,63,483,8,63,11,63,12,63,
        484,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,67,3,67,495,8,67,1,67,1,
        67,1,67,1,68,4,68,501,8,68,11,68,12,68,502,1,68,1,68,1,69,1,69,0,
        0,70,1,1,3,0,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,
        12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,
        23,49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,
        34,71,35,73,36,75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,
        45,93,46,95,47,97,48,99,49,101,50,103,51,105,52,107,53,109,54,111,
        55,113,56,115,57,117,58,119,59,121,60,123,61,125,62,127,0,129,0,
        131,0,133,0,135,63,137,64,139,65,1,0,18,2,0,10,10,13,13,2,0,42,42,
        47,47,1,0,47,47,1,0,42,42,1,0,49,57,2,0,66,66,98,98,1,0,48,49,2,
        0,79,79,111,111,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,
        4,0,10,10,13,13,34,34,92,92,2,0,69,69,101,101,2,0,43,43,45,45,1,
        0,48,57,2,0,65,90,97,122,5,0,34,34,92,92,110,110,114,114,116,116,
        3,0,9,9,12,13,32,32,535,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
        0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,167,1,0,
        0,0,5,182,1,0,0,0,7,199,1,0,0,0,9,201,1,0,0,0,11,204,1,0,0,0,13,
        209,1,0,0,0,15,213,1,0,0,0,17,220,1,0,0,0,19,225,1,0,0,0,21,230,
        1,0,0,0,23,237,1,0,0,0,25,247,1,0,0,0,27,254,1,0,0,0,29,258,1,0,
        0,0,31,264,1,0,0,0,33,272,1,0,0,0,35,278,1,0,0,0,37,282,1,0,0,0,
        39,291,1,0,0,0,41,297,1,0,0,0,43,303,1,0,0,0,45,307,1,0,0,0,47,312,
        1,0,0,0,49,318,1,0,0,0,51,320,1,0,0,0,53,322,1,0,0,0,55,324,1,0,
        0,0,57,326,1,0,0,0,59,328,1,0,0,0,61,331,1,0,0,0,63,334,1,0,0,0,
        65,336,1,0,0,0,67,338,1,0,0,0,69,341,1,0,0,0,71,344,1,0,0,0,73,347,
        1,0,0,0,75,350,1,0,0,0,77,352,1,0,0,0,79,354,1,0,0,0,81,357,1,0,
        0,0,83,360,1,0,0,0,85,363,1,0,0,0,87,366,1,0,0,0,89,369,1,0,0,0,
        91,372,1,0,0,0,93,374,1,0,0,0,95,376,1,0,0,0,97,386,1,0,0,0,99,388,
        1,0,0,0,101,395,1,0,0,0,103,402,1,0,0,0,105,410,1,0,0,0,107,424,
        1,0,0,0,109,434,1,0,0,0,111,442,1,0,0,0,113,455,1,0,0,0,115,465,
        1,0,0,0,117,467,1,0,0,0,119,469,1,0,0,0,121,471,1,0,0,0,123,473,
        1,0,0,0,125,475,1,0,0,0,127,477,1,0,0,0,129,486,1,0,0,0,131,488,
        1,0,0,0,133,490,1,0,0,0,135,494,1,0,0,0,137,500,1,0,0,0,139,506,
        1,0,0,0,141,142,5,47,0,0,142,143,5,47,0,0,143,147,1,0,0,0,144,146,
        8,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,
        1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,6,0,0,0,151,2,1,
        0,0,0,152,166,8,1,0,0,153,155,5,42,0,0,154,153,1,0,0,0,155,156,1,
        0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,166,8,
        2,0,0,159,161,5,47,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,
        0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,166,8,3,0,0,165,152,1,
        0,0,0,165,154,1,0,0,0,165,160,1,0,0,0,166,169,1,0,0,0,167,165,1,
        0,0,0,167,168,1,0,0,0,168,180,1,0,0,0,169,167,1,0,0,0,170,172,5,
        47,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,
        0,0,0,174,181,1,0,0,0,175,177,5,42,0,0,176,175,1,0,0,0,177,178,1,
        0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,171,1,
        0,0,0,180,176,1,0,0,0,180,181,1,0,0,0,181,4,1,0,0,0,182,183,5,47,
        0,0,183,184,5,42,0,0,184,190,1,0,0,0,185,186,3,3,1,0,186,187,3,5,
        2,0,187,189,1,0,0,0,188,185,1,0,0,0,189,192,1,0,0,0,190,188,1,0,
        0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,3,3,
        1,0,194,195,5,42,0,0,195,196,5,47,0,0,196,197,1,0,0,0,197,198,6,
        2,0,0,198,6,1,0,0,0,199,200,5,58,0,0,200,8,1,0,0,0,201,202,5,105,
        0,0,202,203,5,102,0,0,203,10,1,0,0,0,204,205,5,101,0,0,205,206,5,
        108,0,0,206,207,5,115,0,0,207,208,5,101,0,0,208,12,1,0,0,0,209,210,
        5,102,0,0,210,211,5,111,0,0,211,212,5,114,0,0,212,14,1,0,0,0,213,
        214,5,114,0,0,214,215,5,101,0,0,215,216,5,116,0,0,216,217,5,117,
        0,0,217,218,5,114,0,0,218,219,5,110,0,0,219,16,1,0,0,0,220,221,5,
        102,0,0,221,222,5,117,0,0,222,223,5,110,0,0,223,224,5,99,0,0,224,
        18,1,0,0,0,225,226,5,116,0,0,226,227,5,121,0,0,227,228,5,112,0,0,
        228,229,5,101,0,0,229,20,1,0,0,0,230,231,5,115,0,0,231,232,5,116,
        0,0,232,233,5,114,0,0,233,234,5,117,0,0,234,235,5,99,0,0,235,236,
        5,116,0,0,236,22,1,0,0,0,237,238,5,105,0,0,238,239,5,110,0,0,239,
        240,5,116,0,0,240,241,5,101,0,0,241,242,5,114,0,0,242,243,5,102,
        0,0,243,244,5,97,0,0,244,245,5,99,0,0,245,246,5,101,0,0,246,24,1,
        0,0,0,247,248,5,115,0,0,248,249,5,116,0,0,249,250,5,114,0,0,250,
        251,5,105,0,0,251,252,5,110,0,0,252,253,5,103,0,0,253,26,1,0,0,0,
        254,255,5,105,0,0,255,256,5,110,0,0,256,257,5,116,0,0,257,28,1,0,
        0,0,258,259,5,102,0,0,259,260,5,108,0,0,260,261,5,111,0,0,261,262,
        5,97,0,0,262,263,5,116,0,0,263,30,1,0,0,0,264,265,5,98,0,0,265,266,
        5,111,0,0,266,267,5,111,0,0,267,268,5,108,0,0,268,269,5,101,0,0,
        269,270,5,97,0,0,270,271,5,110,0,0,271,32,1,0,0,0,272,273,5,99,0,
        0,273,274,5,111,0,0,274,275,5,110,0,0,275,276,5,115,0,0,276,277,
        5,116,0,0,277,34,1,0,0,0,278,279,5,118,0,0,279,280,5,97,0,0,280,
        281,5,114,0,0,281,36,1,0,0,0,282,283,5,99,0,0,283,284,5,111,0,0,
        284,285,5,110,0,0,285,286,5,116,0,0,286,287,5,105,0,0,287,288,5,
        110,0,0,288,289,5,117,0,0,289,290,5,101,0,0,290,38,1,0,0,0,291,292,
        5,98,0,0,292,293,5,114,0,0,293,294,5,101,0,0,294,295,5,97,0,0,295,
        296,5,107,0,0,296,40,1,0,0,0,297,298,5,114,0,0,298,299,5,97,0,0,
        299,300,5,110,0,0,300,301,5,103,0,0,301,302,5,101,0,0,302,42,1,0,
        0,0,303,304,5,110,0,0,304,305,5,105,0,0,305,306,5,108,0,0,306,44,
        1,0,0,0,307,308,5,116,0,0,308,309,5,114,0,0,309,310,5,117,0,0,310,
        311,5,101,0,0,311,46,1,0,0,0,312,313,5,102,0,0,313,314,5,97,0,0,
        314,315,5,108,0,0,315,316,5,115,0,0,316,317,5,101,0,0,317,48,1,0,
        0,0,318,319,5,43,0,0,319,50,1,0,0,0,320,321,5,45,0,0,321,52,1,0,
        0,0,322,323,5,42,0,0,323,54,1,0,0,0,324,325,5,47,0,0,325,56,1,0,
        0,0,326,327,5,37,0,0,327,58,1,0,0,0,328,329,5,61,0,0,329,330,5,61,
        0,0,330,60,1,0,0,0,331,332,5,33,0,0,332,333,5,61,0,0,333,62,1,0,
        0,0,334,335,5,60,0,0,335,64,1,0,0,0,336,337,5,62,0,0,337,66,1,0,
        0,0,338,339,5,60,0,0,339,340,5,61,0,0,340,68,1,0,0,0,341,342,5,62,
        0,0,342,343,5,61,0,0,343,70,1,0,0,0,344,345,5,38,0,0,345,346,5,38,
        0,0,346,72,1,0,0,0,347,348,5,124,0,0,348,349,5,124,0,0,349,74,1,
        0,0,0,350,351,5,33,0,0,351,76,1,0,0,0,352,353,5,61,0,0,353,78,1,
        0,0,0,354,355,5,58,0,0,355,356,5,61,0,0,356,80,1,0,0,0,357,358,5,
        43,0,0,358,359,5,61,0,0,359,82,1,0,0,0,360,361,5,45,0,0,361,362,
        5,61,0,0,362,84,1,0,0,0,363,364,5,42,0,0,364,365,5,61,0,0,365,86,
        1,0,0,0,366,367,5,47,0,0,367,368,5,61,0,0,368,88,1,0,0,0,369,370,
        5,37,0,0,370,371,5,61,0,0,371,90,1,0,0,0,372,373,5,46,0,0,373,92,
        1,0,0,0,374,375,5,44,0,0,375,94,1,0,0,0,376,377,5,59,0,0,377,96,
        1,0,0,0,378,387,5,48,0,0,379,383,7,4,0,0,380,382,3,129,64,0,381,
        380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,
        387,1,0,0,0,385,383,1,0,0,0,386,378,1,0,0,0,386,379,1,0,0,0,387,
        98,1,0,0,0,388,389,5,48,0,0,389,391,7,5,0,0,390,392,7,6,0,0,391,
        390,1,0,0,0,392,393,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,
        100,1,0,0,0,395,396,5,48,0,0,396,398,7,7,0,0,397,399,7,8,0,0,398,
        397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,
        102,1,0,0,0,402,403,5,48,0,0,403,405,7,9,0,0,404,406,7,10,0,0,405,
        404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        104,1,0,0,0,409,411,3,129,64,0,410,409,1,0,0,0,411,412,1,0,0,0,412,
        410,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,418,5,46,0,0,415,
        417,3,129,64,0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,
        419,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,421,423,3,127,63,0,422,
        421,1,0,0,0,422,423,1,0,0,0,423,106,1,0,0,0,424,429,5,34,0,0,425,
        428,3,133,66,0,426,428,8,11,0,0,427,425,1,0,0,0,427,426,1,0,0,0,
        428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,
        431,429,1,0,0,0,432,433,5,34,0,0,433,108,1,0,0,0,434,439,5,34,0,
        0,435,438,3,133,66,0,436,438,8,11,0,0,437,435,1,0,0,0,437,436,1,
        0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,110,1,
        0,0,0,441,439,1,0,0,0,442,447,5,34,0,0,443,446,3,133,66,0,444,446,
        8,11,0,0,445,443,1,0,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,
        1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,
        5,92,0,0,451,452,9,0,0,0,452,112,1,0,0,0,453,456,3,131,65,0,454,
        456,5,95,0,0,455,453,1,0,0,0,455,454,1,0,0,0,456,462,1,0,0,0,457,
        461,3,129,64,0,458,461,3,131,65,0,459,461,5,95,0,0,460,457,1,0,0,
        0,460,458,1,0,0,0,460,459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,
        0,462,463,1,0,0,0,463,114,1,0,0,0,464,462,1,0,0,0,465,466,5,40,0,
        0,466,116,1,0,0,0,467,468,5,41,0,0,468,118,1,0,0,0,469,470,5,123,
        0,0,470,120,1,0,0,0,471,472,5,125,0,0,472,122,1,0,0,0,473,474,5,
        91,0,0,474,124,1,0,0,0,475,476,5,93,0,0,476,126,1,0,0,0,477,479,
        7,12,0,0,478,480,7,13,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,482,
        1,0,0,0,481,483,3,129,64,0,482,481,1,0,0,0,483,484,1,0,0,0,484,482,
        1,0,0,0,484,485,1,0,0,0,485,128,1,0,0,0,486,487,7,14,0,0,487,130,
        1,0,0,0,488,489,7,15,0,0,489,132,1,0,0,0,490,491,5,92,0,0,491,492,
        7,16,0,0,492,134,1,0,0,0,493,495,5,13,0,0,494,493,1,0,0,0,494,495,
        1,0,0,0,495,496,1,0,0,0,496,497,5,10,0,0,497,498,6,67,1,0,498,136,
        1,0,0,0,499,501,7,17,0,0,500,499,1,0,0,0,501,502,1,0,0,0,502,500,
        1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,6,68,0,0,505,138,
        1,0,0,0,506,507,9,0,0,0,507,140,1,0,0,0,31,0,147,156,162,165,167,
        173,178,180,190,383,386,393,400,407,412,418,422,427,429,437,439,
        445,447,455,460,462,479,484,494,502,2,6,0,0,1,67,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LINE_COMMENT = 1
    BLOCK_COMMENT = 2
    COLON = 3
    IF = 4
    ELSE = 5
    FOR = 6
    RETURN = 7
    FUNC = 8
    TYPE = 9
    STRUCT = 10
    INTERFACE = 11
    STRING = 12
    INT = 13
    FLOAT = 14
    BOOLEAN = 15
    CONST = 16
    VAR = 17
    CONTINUE = 18
    BREAK = 19
    RANGE = 20
    NIL = 21
    TRUE = 22
    FALSE = 23
    PLUS = 24
    MINUS = 25
    MUL = 26
    DIV = 27
    MOD = 28
    EQUAL = 29
    NOT_EQUAL = 30
    LESS = 31
    GREATER = 32
    LESS_OR_EQUAL = 33
    GREATER_OR_EQUAL = 34
    AND = 35
    OR = 36
    NOT = 37
    ASSIGN = 38
    SHORT_ASSIGN = 39
    PLUS_ASSIGN = 40
    MINUS_ASSIGN = 41
    MUL_ASSIGN = 42
    DIV_ASSIGN = 43
    MOD_ASSIGN = 44
    SELECTOR = 45
    COMMA = 46
    SEMICO = 47
    DEC_LIT = 48
    BIN_LIT = 49
    OCT_LIT = 50
    HEX_LIT = 51
    FLOAT_LIT = 52
    STRING_LIT = 53
    UNCLOSE_STRING = 54
    ILLEGAL_ESCAPE = 55
    ID = 56
    LPAREN = 57
    RPAREN = 58
    LBRACE = 59
    RBRACE = 60
    LBRACK = 61
    RBRACK = 62
    NL = 63
    WS = 64
    ERROR_CHAR = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
            "'struct'", "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "','", "';'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "LINE_COMMENT", "BLOCK_COMMENT", "COLON", "IF", "ELSE", "FOR", 
            "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", 
            "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
            "NIL", "TRUE", "FALSE", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
            "EQUAL", "NOT_EQUAL", "LESS", "GREATER", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", 
            "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", "PLUS_ASSIGN", 
            "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "SELECTOR", 
            "COMMA", "SEMICO", "DEC_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
            "FLOAT_LIT", "STRING_LIT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ID", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "NL", "WS", "ERROR_CHAR" ]

    ruleNames = [ "LINE_COMMENT", "ALLOWED_TEXT", "BLOCK_COMMENT", "COLON", 
                  "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS", "GREATER", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", 
                  "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", "PLUS_ASSIGN", 
                  "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                  "SELECTOR", "COMMA", "SEMICO", "DEC_LIT", "BIN_LIT", "OCT_LIT", 
                  "HEX_LIT", "FLOAT_LIT", "STRING_LIT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ID", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACK", "RBRACK", "EXP", "DIGIT", "LETTER", 
                  "ESC", "NL", "WS", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    prevToken = None
    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        elif tk==self.NL:
            result = super().emit();
            result.text = ';'
            result.type = self.SEMICO
            self.prevToken = None
            return result  
        else:
            result = super().emit();
            self.prevToken = result
            return result;


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[67] = self.NL_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                statement_end_tokens = {
                self.ID, self.DEC_LIT, self.BIN_LIT, self.OCT_LIT, self.HEX_LIT, self.FLOAT_LIT, self.TRUE, self.FALSE, self.NIL, self.STRING_LIT,
                self.INT, self.FLOAT, self.BOOLEAN, self.STRING,
                self.RETURN, self.CONTINUE, self.BREAK,
                self.RPAREN, self.RBRACK, self.RBRACE
            }
                if(self.prevToken == None):
                    self.skip()
                elif self.prevToken.type not in statement_end_tokens:
                    self.skip()
                
     


